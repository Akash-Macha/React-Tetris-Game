{"version":3,"sources":["img/bg.png","components/gameHelpers.js","components/styles/StyledTetris.js","components/tetromios.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledState.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CELL","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","Math","floor","random","console","log","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fc07679.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\n// 2nd value can be clear or merge\nconst CELL = [0, 'clear'];\n\n/**\n * each cell in height we create a row with STAGE_WIDTH\n * fill each row with [0, 'clear']\n * \n * Understand \n * \tArray.from\n * \tArray()\n */\nexport const createStage = () => \n\tArray.from( Array(STAGE_HEIGHT), () => \n\t\tnew Array(STAGE_WIDTH).fill(CELL)\n\t);\n\n/** Collision Detection: https://www.youtube.com/watch?v=ZGOaCxX8HIU&t=5822s\n * \n * return true if collided with something else false\n * \n * renamed x and y to moveX and moveY respectively, coz we use x another purpose\n * \n */\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\n\t\n\tfor(let y = 0 ; y < player.tetromino.length; ++y){\n\t\tfor(let x = 0 ; x < player.tetromino[y].length; ++x){\n\n\t\t\t// 1. Check that we're on an actual Tetromino cell\n\t\t\tif (player.tetromino[y][x] !== 0) {\n\n\t\t\t\tif(\n\t\t\t\t// 2. check that our move is inside the game areas height (y)\n\t\t\t\t// we shouldn't go through the bottom of the play area\n\t\t\t\t!stage[y + player.pos.y + moveY] || \n\n\t\t\t\t// 3. check that our move is inside the game areas width (x)\n\t\t\t\t!stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n\n\t\t\t\t// 4. check that the cell we're moving to isn't set to clear\n\t\t\t\t// because if it is clear we're not colliding\n\t\t\t\tstage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n\t\t\t\t){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n};\n","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100px;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`;","\nexport const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0' },\n    I: {\n        shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n        ],\n        color: '80, 227, 230',\n    },\n    J: {\n        shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0],\n        ],\n        color: '223, 217, 36',\n    },\n    L: {\n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L'],\n        ],\n        color: '223, 217, 36',\n    },\n    O: {\n        shape: [\n            ['O', 'O'],\n            ['O', 'O'],\n        ],\n        color: '223, 217, 36',\n    },\n    S: {\n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0], \n            [0, 0, 0],\n        ],\n        color: '48, 211, 56',\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n        color: '132, 61, 198',\n    },\n    Z: {\n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0],\n        ],\n        color: '227, 78, 78',\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetromonos = 'IJLOSTZ';\n    const randomTetromino = tetromonos[Math.floor(Math.random() * tetromonos.length)];\n    console.log('selected TETROMINOS: ', TETROMINOS[randomTetromino]);\n    return TETROMINOS[randomTetromino];\n}","import { useState, useEffect } from 'react';\n\nimport { createStage } from '../components/gameHelpers';\n\n/** https://youtu.be/ZGOaCxX8HIU?t=5037 */\nexport const useStage = (player, resetPlayer) => {\n\tconst [stage, setStage] = useState(createStage()); // clean board\n\tconst [rowsCleared, setRowsCleared] = useState(0);\n\n\tuseEffect(() => {\n\t\tsetRowsCleared(0);\n\t\tconst sweepRows = (newStage) => \n\t\t\t// accumulator is the new array that we're builing inside the reduce function\n\t\t\t//\t\t\t\taccumulator, row\n\t\t\tnewStage.reduce((ack, row) => {\n\t\t\t\t// if a row contains at least one 0, it isn't filled completely, we shouldn't clear it\n\t\t\t\t// the below condition will return true, when there are No 0's in the row, we can clear it!\n\t\t\t\tif (row.findIndex(cell => cell[0] === 0) === -1) {\n\t\t\t\t\t// if a row is filled completely\n\t\t\t\t\t// add +1 to rowsCleared\n\t\t\t\t\tsetRowsCleared((prev) => prev + 1);\n\n\t\t\t\t\t// add a empyt row at the top of the row\n\t\t\t\t\tack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n\t\t\t\t\t\n\t\t\t\t\treturn ack;\n\t\t\t\t}\n\t\t\t/** if we have at least one 0 in the row, we'll add the row to accumulator*/\n\t\t\tack.push(row); \n\n\t\t\treturn ack;\n\t\t}, []);\n\n\t\tconst updateStage = (prevStage) => {\n\t\t\t// When we update the Stage\n\t\t\t// 1. Flush the stage, (remove everything that shouldn't be there, if lowest row is filled up?)\n\t\t\t//      -> we have to clear it (the lowest row) from the previous render\n\n\t\t\t// if we haven't marked our cell as 'merge'\n\t\t\t// then we just clear it and return a fresh clear cell\n\t\t\t// otherwise we return the cell as it is & it will stay in the stage\n\t\t\t//      Thus we know what cells have collided tetraminos in them or not\n\t\t\tconst newStage = prevStage.map((row) => row.map((cell) =>\n\t\t\t  // CELL = [0, 'clear']\n\t\t\t\tcell[1] === 'clear'\n\t\t\t\t\t? [0, 'clear']\n\t\t\t\t\t: cell));\n\n\t\t\t/**\n\t\t\t * 2. Draw the tetramino\n\t\t\t * eg tetromono:\n\t\t\t *    [[0, 'I', 0, 0],\n       *     [0, 'I', 0, 0],\n       *     [0, 'I', 0, 0],\n       *     [0, 'I', 0, 0],]\n\t\t\t * \n\t\t\t * newStage is a fresh and flush stage, thus we can use it to position tetromino on the stage\n\t\t\t * stage structure:\n\t\t\t * \t\t[\n\t\t\t * \t\t\t[[0, 'clear'], [0, 'clear'], [0, 'clear'], ...],\n\t\t\t * \t\t  [[0, 'clear'], [0, 'clear'], [0, 'clear'], ...],\n\t\t\t * \t\t  [[0, 'clear'], [0, 'clear'], [0, 'clear'], ...],\n\t\t\t * \t\t]\n\t\t\t */\n\t\t\tplayer.tetromino.forEach((row, y) => {\n\t\t\t\trow.forEach((value, x) => {\n\t\t\t\t\tif (value !== 0) {\n\t\t\t\t\t\t// console.log('newStage: ', newStage);\n\t\t\t\t\t\t// console.log('y: ', y);\n\t\t\t\t\t\t// console.log('player: ', player);\n\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\n\t\t\t// then check if we collided\n\t\t\tif (player.collided) {\n\t\t\t\tresetPlayer();\n\t\t\t\treturn sweepRows(newStage);\n\t\t\t}\n\n\t\t\treturn newStage;\n\t\t};\n\n\t\tsetStage((prev) => updateStage(prev))\n\t}, [player, resetPlayer]);\n// }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n\n\treturn [stage, setStage, rowsCleared];\n};\n\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`;\n\n\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from \"./tetromios\";\n\nconst Cell = ({ type }) => (\n    <>\n        <StyledCell type={type} color={TETROMINOS[type].color} >\n            {console.log(\"[Cell] re-renderd\")}\n        </StyledCell>\n    </>\n);\n\nexport default React.memo(Cell);\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n`;","import React from 'react';\n\nimport Cell from './Cell';\nimport { StyledStage } from './styles/StyledState';\n\nconst Stage = ({ stage }) => (\n    // width and height props changed the game\n    <StyledStage width={stage[0].length} height={stage.length}>\n        {stage.map((row) => row.map((cell, x) => <Cell type={cell[0]}/>) )  }\n    </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red': '#999')};\n    background: #000;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n`;\n","import React from 'react';\n\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n`;","import React from 'react';\n\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => \n    <StyledStartButton onClick={callback}>\n        Start Game\n    </StyledStartButton>;\n\nexport default StartButton;\n","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from './gameHelpers';\n\n// styled components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// custom hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n\tconsole.log('re-rendered: [Tetris]');\n\n\tconst [dropTime, setDropTime] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tconst [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n\tconst [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n\tconst [\n\t\tscore, setScore,\n\t\trows, setRows,\n\t\tlevel, setLevel,\n\t\t] = useGameStatus(rowsCleared);\n\n\t/**\n\t * this will take care of Left & Right movements\n\t * dir will have the x co-ordinate value, since we're handling left & right moves\n\t */\n\tconst movePlayer = (dir) => {\n\t\t// move if we don't collide with anything\n\t\t// stop moving if we collide with side walls\n\t\tif(!checkCollision(player, stage, {x: dir, y: 0})) {\n\t\t\tupdatePlayerPos({\n\t\t\t\tx: dir,\n\t\t\t\ty: 0,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Reset the Stage, DropTime, Player, GameOver state, Score, Level, Rows count\n\t */\n\tconst startGame= () => {\n\t\tsetStage(createStage());\n\t\tsetDropTime(1000); // 1 sec\n\t\tresetPlayer();\n\t\tsetGameOver(false);\n\n\t\tsetScore(0);\n\t\tsetRows(0);\n\t\tsetLevel(0);\n\t}; \n\n\t/**\n\t * while droping we increase y value and make\n\t * tetramine a one cell down!\n\t */\n\tconst drop = () => {\n\t\t// increase level when player has cleared 10 rows\n\t\tif (rows > (level + 1) * 10) {\n\t\t\tsetLevel((prev) => prev + 1);\n\n\t\t\t// Also increase speed\n\t\t\tsetDropTime(1000 / (level + 1) + 200);\n\t\t}\n\n\t\tif(!checkCollision(player, stage, {x: 0, y: 1})) {\n\t\t\t/** if there is NO collision, move the cell 1 bit down */\n\t\t\tupdatePlayerPos({\n\t\t\t\tx: 0,\n\t\t\t\ty: 1,\n\t\t\t\tcollided: false,\n\t\t\t});\n\t\t} else {\n\t\t\t// if there is Collision?\n\t\t\t// Game Over!\n\t\t\tif(player.pos.y < 1) {\n\t\t\t\tconsole.log(\"GAME OVER\");\n\t\t\t\tsetGameOver(true);\n\t\t\t\tsetDropTime(null);\n\t\t\t}\n\t\t\tupdatePlayerPos({x: 0, y: 0, collided: true})\n\t\t}\n\t};\n\n\t/** ArrwoDown = 40\n\t * \tbut the function name I put is keyUp?\n\t *  check where I have used it\n\t */\n\tconst keyUp = ({ keyCode }) => {\n\t\t// console.log(\"interval on\");\n\t\tif (!gameOver) {\n\t\t\t/** ArrwoDown = 40 */\n\t\t\tif (keyCode === 40) {\n\t\t\t\tsetDropTime(1000 / (level + 1) + 200);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst dropPlayer = () => {\n\t\t// console.log(\"interval off\");\n\t\t\n\t\t// When we press the down key\n\t\t// we want to stop the player \n\t\t// stop the interval, \n\t\t// and we need to activate it when user leaves the down key: for that we're creating the func -> \n\t\tsetDropTime(null);\n\t\tdrop();\n\t};\n\n\t/**  de-structuring keyCode from event 'e' */\n\tconst move = ({ keyCode }) => {\n\t\tif (!gameOver) {\n\t\t\t// left arrow\n\t\t\tif (keyCode === 37) movePlayer(-1);\n\t\t\t// righ arrow\n\t\t\telse if (keyCode === 39) movePlayer(1);\n\t\t\t// down arrow\n\t\t\telse if (keyCode === 40) dropPlayer();\n\t\t\t// up arrow\n\t\t\telse if (keyCode === 38) playerRotate(stage, 1); // 1 indicates in clock-wise\n\t\t}\n\t};\n\n\t// useInterval\n\tuseInterval(() => {\n\t\tdrop();\n\t}, dropTime);\n\n\treturn (\n\t\t/** role=\"button\" will register the keystrokes */  \n\t\t<StyledTetrisWrapper \n\t\t\trole=\"button\" \n\t\t\ttabIndex=\"0\" \n\t\t\tonKeyDown={e => \n\t\t\tmove(e)} onKeyUp={keyUp}\n\t\t>\n\t\t\t<StyledTetris>\n\t\t\t\t<Stage stage={stage} />\n\t\t\t\t<aside>\n\t\t\t\t\t{gameOver ? (\n\t\t\t\t\t\t<Display gameOver={gameOver} text=\"Game Over\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Display text={`Score: ${score}`} />\n\t\t\t\t\t\t\t\t<Display text={`Rows: ${rows}`} />\n\t\t\t\t\t\t\t\t<Display text={`Level: ${level}`} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<StartButton callback={startGame} />\n\t\t\t\t</aside>\n\t\t\t</StyledTetris>\n\t\t</StyledTetrisWrapper>\n\t);\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../components/tetromios';\nimport { STAGE_WIDTH, checkCollision } from '../components/gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape, // Stage will be blank on first look\n        // tetromino: randomTetromino().shape,\n        collided: false,\n    });\n\n\n    const rotate = (matrix, dir) => {\n        // Make the rows to become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) => matrix.map((col) => col[index]));\n\n        // Reverse each row to get a rotated matrix\n        if (dir > 0) return rotatedTetro.map((row) => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        // we're not moving so we send - {x: 0, y: 0}\n        while(checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\n            clonedPlayer.pos.x += offset; // add the offset\n            offset = -(offset + (offset > 0));\n\n            if (offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n\n    };\n\n    /** set the player state */\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer((prev) => ({\n            ...prev,\n            pos: {\n                x: (prev.pos.x += x),\n                y: (prev.pos.y += y),\n            },\n            collided,\n        }))\n    };\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: {\n                x: STAGE_WIDTH / 2 - 2, // middle of the Grid\n                y: 0,                   // Top of the Grid\n            },\n            tetromino: randomTetromino().shape, // get a random Tetromino\n            collided: false,\n        });\n    }, []);\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = (rowsCleared) => {\n\t// state for GameStatus\n\tconst [score, setScore] = useState(0);\n\t// total rows cleared\n\tconst [rows, setRows] = useState(0);\n\tconst [level, setLevel] = useState(0);\n\n\tconst linePoints = [40, 100, 300, 1200];\n\n\t/** we call calcScore inside useEffect, \n\t *  that is why we're wrapping it with useCallback\n\t *  to avoid infinite loop re-creating of func\n\t */\n\tconst calcScore = useCallback(() => {\n\t\t// check we have score\n\t\t//  rowsCleared <= 0, no score to calculate\n\t\tif (rowsCleared > 0) {\n\t\t\t// This is how original Tetris score is calculated\n\t\t\tsetScore((prev) => \n\t\t\t\t (prev + linePoints[rowsCleared - 1] * (level + 1)));\n\t\t\tsetRows((prev) => prev + rowsCleared);\t\n\t\t}\n\t}, [level, linePoints, rowsCleared]);\n\n\t/** we want to fire calcScore automatically\n\t *  Thus we useEffect\n\t */\n\tuseEffect(() => {\n\t\tcalcScore();\n\t}, [calcScore, rowsCleared, score]);\n\n\t/**\n\t * score to display\n\t * setScore : setScoer when we start a new game\n\t * rows\n\t * setRows : setRows should be 0, when we start a new Game\n\t * level : to display\n\t * setLevel : set to 0, when we start a new Game\n\t */\n\treturn [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}